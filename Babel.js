/*
    Babel
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

        최신 자바스크립트 문법을 브라우저에서 사용하기 위한 도구로 대부분의 브라우져를 지원할수 있는 코드로 변환한다.

        리액트 공식문서에는 바벨 따위의 트랜스파일러 없이도 개발할 수 있는 방법을 안내한다.
        하지만 실제 개발 프로젝트를 진행 해보면 이것만으로는 금방 한계를 느낀다.
        앞으로 다룰 리액트 컴포넌트는 클래스 문법을 사용하는 것이 보다 편하다.

        바벨의 기본 동작
            바벨은 ECMAScript2015 이상의 코드를 적당한 하위 버전으로 바꾸는 것이 주된 역할이다.
            이렇게 바뀐 코드는 인터넷 익스프로러나 구버전 브라우져처럼 최신 자바스크립트 코드를 이해하지 못하는 환경에서도 잘 동작한다.

    Babel
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

        최신 자바스크립트 문법을 브라우저에서 사용하기 위한 도구로 대부분의 브라우져를 지원할수 있는 코드로 변환한다.

        리액트 공식문서에는 바벨 따위의 트랜스파일러 없이도 개발할 수 있는 방법을 안내한다.
        하지만 실제 개발 프로젝트를 진행 해보면 이것만으로는 금방 한계를 느낀다.
        앞으로 다룰 리액트 컴포넌트는 클래스 문법을 사용하는 것이 보다 편하다.

        바벨의 기본 동작
            바벨은 ECMAScript2015 이상의 코드를 적당한 하위 버전으로 바꾸는 것이 주된 역할이다.
            이렇게 바뀐 코드는 인터넷 익스프로러나 구버전 브라우져처럼 최신 자바스크립트 코드를 이해하지 못하는 환경에서도 잘 동작한다.

            바벨을 이용해 아래 코드를 인터넷 익스플로러가 이해할 수 있는 코드로 바꿔 보겠다.
                const alert = msg => window.alert(msg)

            먼저 바벨 최신 버전를 설치한다. 터미널 도구를 사용하기 위해 커맨드라인 도구도 함께 설치하자.
                npm install -D @babel/core  @babel/cli

            설치를 완료후 node_modules/.bin 폴더에 추가된 바벨 명령어를 사용할 수 있다.
                npx babel app.js
                const alert = msg => window.alert(msg);

            바벨은 세 단계로 빌드를 
                1. 파싱(Parsing)
                2. 변환(Transforming)
                3. 출력(Printing)

            코드를 읽고 추상 구문 트리(AST)로 변환하는 단계를 "파싱"이라고 한다.
            이것은 빌드 작업을 처리하기에 적합한 자료구조인데 컴파일러 이론에 사용되는 개념이다.
            추상 구문 트리를 변경하는 것이 "변환" 단계이다.
            실제로 코드를 변경하는 작업을 한다. 변경된 결과물을 "출력"하는 것을 마지막으로 바벨은 작업을 완료한다.
        

        
    
*/